// Code generated by BobGen sqlite v0.25.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/im"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/expr"
)

// Day is an object representing the database table.
type Day struct {
	ID   int32     `db:"id,pk" `
	Date time.Time `db:"date" `
}

// DaySlice is an alias for a slice of pointers to Day.
// This should almost always be used instead of []*Day.
type DaySlice []*Day

// Days contains methods to work with the days table
var Days = sqlite.NewTablex[*Day, DaySlice, *DaySetter]("", "days")

// DaysQuery is a query on the days table
type DaysQuery = *sqlite.ViewQuery[*Day, DaySlice]

// DaysStmt is a prepared statment on days
type DaysStmt = bob.QueryStmt[*Day, DaySlice]

// DaySetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type DaySetter struct {
	ID   omit.Val[int32]     `db:"id,pk"`
	Date omit.Val[time.Time] `db:"date"`
}

func (s DaySetter) SetColumns() []string {
	vals := make([]string, 0, 2)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.Date.IsUnset() {
		vals = append(vals, "date")
	}

	return vals
}

func (s DaySetter) Overwrite(t *Day) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.Date.IsUnset() {
		t.Date, _ = s.Date.Get()
	}
}

func (s DaySetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 0, 2)
	if !s.ID.IsUnset() {
		vals = append(vals, sqlite.Arg(s.ID))
	}

	if !s.Date.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Date))
	}

	return im.Values(vals...)
}

func (s DaySetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions()...).Apply(q)
}

func (s DaySetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 2)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "id")...),
			sqlite.Arg(s.ID),
		}})
	}

	if !s.Date.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "date")...),
			sqlite.Arg(s.Date),
		}})
	}

	return exprs
}

type dayColumnNames struct {
	ID   string
	Date string
}

var DayColumns = struct {
	ID   sqlite.Expression
	Date sqlite.Expression
}{
	ID:   sqlite.Quote("days", "id"),
	Date: sqlite.Quote("days", "date"),
}

type dayWhere[Q sqlite.Filterable] struct {
	ID   sqlite.WhereMod[Q, int32]
	Date sqlite.WhereMod[Q, time.Time]
}

func DayWhere[Q sqlite.Filterable]() dayWhere[Q] {
	return dayWhere[Q]{
		ID:   sqlite.Where[Q, int32](DayColumns.ID),
		Date: sqlite.Where[Q, time.Time](DayColumns.Date),
	}
}

// FindDay retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindDay(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*Day, error) {
	if len(cols) == 0 {
		return Days.Query(
			ctx, exec,
			SelectWhere.Days.ID.EQ(IDPK),
		).One()
	}

	return Days.Query(
		ctx, exec,
		SelectWhere.Days.ID.EQ(IDPK),
		sm.Columns(Days.Columns().Only(cols...)),
	).One()
}

// DayExists checks the presence of a single record by primary key
func DayExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return Days.Query(
		ctx, exec,
		SelectWhere.Days.ID.EQ(IDPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the Day
func (o *Day) PrimaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

// Update uses an executor to update the Day
func (o *Day) Update(ctx context.Context, exec bob.Executor, s *DaySetter) error {
	return Days.Update(ctx, exec, s, o)
}

// Delete deletes a single Day record with an executor
func (o *Day) Delete(ctx context.Context, exec bob.Executor) error {
	return Days.Delete(ctx, exec, o)
}

// Reload refreshes the Day using the executor
func (o *Day) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Days.Query(
		ctx, exec,
		SelectWhere.Days.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

func (o DaySlice) UpdateAll(ctx context.Context, exec bob.Executor, vals DaySetter) error {
	return Days.Update(ctx, exec, &vals, o...)
}

func (o DaySlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return Days.Delete(ctx, exec, o...)
}

func (o DaySlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]int32, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.Days.ID.In(IDPK...),
	)

	o2, err := Days.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}

			*old = *new
			break
		}
	}

	return nil
}
