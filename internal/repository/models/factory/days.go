// Code generated by BobGen sqlite v0.25.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"time"

	"github.com/aarondl/opt/omit"
	models "github.com/danielcosme/curious-ape/internal/repository/models"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type DayMod interface {
	Apply(*DayTemplate)
}

type DayModFunc func(*DayTemplate)

func (f DayModFunc) Apply(n *DayTemplate) {
	f(n)
}

type DayModSlice []DayMod

func (mods DayModSlice) Apply(n *DayTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// DayTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type DayTemplate struct {
	ID   func() int32
	Date func() time.Time

	f *Factory
}

// Apply mods to the DayTemplate
func (o *DayTemplate) Apply(mods ...DayMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Day
// this does nothing with the relationship templates
func (o DayTemplate) toModel() *models.Day {
	m := &models.Day{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Date != nil {
		m.Date = o.Date()
	}

	return m
}

// toModels returns an models.DaySlice
// this does nothing with the relationship templates
func (o DayTemplate) toModels(number int) models.DaySlice {
	m := make(models.DaySlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Day
// according to the relationships in the template. Nothing is inserted into the db
func (t DayTemplate) setModelRels(o *models.Day) {}

// BuildSetter returns an *models.DaySetter
// this does nothing with the relationship templates
func (o DayTemplate) BuildSetter() *models.DaySetter {
	m := &models.DaySetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.Date != nil {
		m.Date = omit.From(o.Date())
	}

	return m
}

// BuildManySetter returns an []*models.DaySetter
// this does nothing with the relationship templates
func (o DayTemplate) BuildManySetter(number int) []*models.DaySetter {
	m := make([]*models.DaySetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Day
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use DayTemplate.Create
func (o DayTemplate) Build() *models.Day {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.DaySlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use DayTemplate.CreateMany
func (o DayTemplate) BuildMany(number int) models.DaySlice {
	m := make(models.DaySlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableDay(m *models.DaySetter) {
	if m.Date.IsUnset() {
		m.Date = omit.From(random[time.Time](nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Day
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *DayTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Day) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a day and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *DayTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Day, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// create builds a day and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *DayTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Day, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableDay(opt)

	m, err := models.Days.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = dayCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple days and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o DayTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.DaySlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// createMany builds multiple days and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o DayTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.DaySlice, error) {
	var err error
	m := make(models.DaySlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Day has methods that act as mods for the DayTemplate
var DayMods dayMods

type dayMods struct{}

func (m dayMods) RandomizeAllColumns(f *faker.Faker) DayMod {
	return DayModSlice{
		DayMods.RandomID(f),
		DayMods.RandomDate(f),
	}
}

// Set the model columns to this value
func (m dayMods) ID(val int32) DayMod {
	return DayModFunc(func(o *DayTemplate) {
		o.ID = func() int32 { return val }
	})
}

// Set the Column from the function
func (m dayMods) IDFunc(f func() int32) DayMod {
	return DayModFunc(func(o *DayTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m dayMods) UnsetID() DayMod {
	return DayModFunc(func(o *DayTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m dayMods) RandomID(f *faker.Faker) DayMod {
	return DayModFunc(func(o *DayTemplate) {
		o.ID = func() int32 {
			return random[int32](f)
		}
	})
}

func (m dayMods) ensureID(f *faker.Faker) DayMod {
	return DayModFunc(func(o *DayTemplate) {
		if o.ID != nil {
			return
		}

		o.ID = func() int32 {
			return random[int32](f)
		}
	})
}

// Set the model columns to this value
func (m dayMods) Date(val time.Time) DayMod {
	return DayModFunc(func(o *DayTemplate) {
		o.Date = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m dayMods) DateFunc(f func() time.Time) DayMod {
	return DayModFunc(func(o *DayTemplate) {
		o.Date = f
	})
}

// Clear any values for the column
func (m dayMods) UnsetDate() DayMod {
	return DayModFunc(func(o *DayTemplate) {
		o.Date = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m dayMods) RandomDate(f *faker.Faker) DayMod {
	return DayModFunc(func(o *DayTemplate) {
		o.Date = func() time.Time {
			return random[time.Time](f)
		}
	})
}

func (m dayMods) ensureDate(f *faker.Faker) DayMod {
	return DayModFunc(func(o *DayTemplate) {
		if o.Date != nil {
			return
		}

		o.Date = func() time.Time {
			return random[time.Time](f)
		}
	})
}
